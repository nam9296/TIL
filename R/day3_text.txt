# 배열
# - 행렬의 일반화된 데이터 형식, 차원을 속성으로 갖는 벡터
# 벡터(1차원), 행렬(2차원) 모두 배열이라고 할 수 있음
# dim함수로 배열 생성


a<-1:24
dim(a)<-c(3,4,2) # 3행 4열 3차원 2개의 면
a

# array함수 : 다차원 배열 생성

ary<-array(1:24,c(3,4,2))
ary[1,3,2]
ary[1,,]
ary[,1,]
ary[,,2]

#ary배열의 2번째 면에 있는 1번 열의 값을 추출
ary[,1,2]

#2차원 행렬로 출력
ary[,1,2,drop=FALSE]



# list() : 리스트 
# 다양한 데이터 타입을 저장할 수 있음
# 벡터와 행렬은 원소의 데이터 타입이 모두 같아야함
lst<-list(0.6,0.9,0.5)
lst
# [[1]]은 원소의 윛치(인덱스)를 의미
# [1]0.6은 원소의 값
# 리스트는 스칼라, 벡터(숫자/문자), 행렬, 함수 저장 기능

lst<-list(1.5, "apple", c(2,3,4), matrix(1:6,ncol=3), mean)
lst
lst[[1]]<-1.5
lst[[2]]<-"apple"
lst[[3]]<-c(2,3,4)
lst[[4]]<-matrix(1:6,ncol=3)
lst[[5]]<-mean()
lst

lst<-list(0.6,0.9,0.5)
lst
names(lst)<-c("n1","n2","n3")
lst
# 이름을 주면 [[1]]형식이 $이름으로 변경됨

lst$n1

lst
names(lst)
length(lst)

# lst[[n]]
#:lst리스트의 n번째 원소가 선택, 원소의 저장 형식을 그대로 가지고 출력함

#lst[n]
# : n번째 원소가 선택, 원소가 리스트 형식으로 출력이 됨.

product<-list("a001","mouse",30000)
product
product[[3]]
product[3]

# class()
# 타입을 확인하는 함수
class(product[[3]])# numeric
class(product[3]) # list

product[[3]]*0.9
# product[3]*0.9 는 숫자가 아니므로 에러발생

# 2개 이상의 리스트 요소를 한꺼번에 참조, 참조 결과는리스트
product
product[c(1,2)]

product[c(TRUE,FALSE,TRUE)]


product[-1]


# 이름을 지정하기
product<-list(id="a001",name="mouse",price=30000)
# 1.
product$name
# 2.
product[["name"]]


# 두개 이상의 원소 참조, 결과는 리스트
product[c("name","price")]


product[["name"]]
# product[["nn"]] 없는 이름으로 하면 NULL
# product[[4]]에러발생

lst<-list(one=1,two=2,three=list(a=3.1,b=3.2))
lst

lst[["three"]]
lst$three
# 3번째 요소를 추출, 추출 결과 또한 리스트

lst$three$a
lst[["three"]][["a"]] # 벡터
lst[["three"]]["a"] # 리스트

# 리스트 조작 : [[]], $ 기호 사용하여 요소 접근
product<-list(id="a001",name="mouse",price=30000)

# product[["price"]]<-50000
# product[[3]]<-50000
# product$price<-50000


product[3]
class(product[3])
# product[3]<50000
# 값을 1개만 할당할 때는 [[]],[] 둘다 사용가능



# 하나의 원소에 여러 개의 값을 할당할 때는 [[]] 와 []는 다름
product<-list(id="a001",name="mouse",price=30000)
# [[]]는 할당되는 데이터가 벡터형식
# []는 할당하고자 하는 값을 리스트형식으로 변환해야함

product[[3]]<-c(40000,50000)
product

# product[3]<-c(20000,30000) 에러
product[3]<-list(c(20000,30000))
product

# 두개 이상의 원소 값들을 동시에 변경할때는 []사용
product[1:2]
product[1:3]<-list("a02","monitor",999)
product


product[[4]]<-c("domestic","export")
product

product$madein<-c("korea","india")
product

product[["madein2"]]<-c("ac","ext")
product




#리스트에 여러개 원소를 한번에 추가(리스트 구조로 저장,타입이 모두 같은 경우에는 벡터 구조도 가능)

product[8:10]<-list(0.1,0.2,"0.3")
product

product[8:10]<-list(0.1,0.2,0.3)
product


product[11:13]<-c(0.1,0.2,0.3)
product

product[11:13]<-list(0.1,0.2,"0.3")
product

n<-c("one","two","three")
v<-c(100,200,300)
mylist<-list()
mylist[n]<-v
mylist

# 리스트에서 원소 제거는 NULL을 할당
mylist[["two"]]<-NULL
mylist

mylist[c("one","three")]<-NULL
mylist


n<-c("one","two","three")
v<-c(100,200,300)
mylist<-list()
mylist[n]<-v
mylist

# 조건에 따른 원소 제거
mylist<200
mylist[mylist<200]
mylist[mylist<200]<-NULL
mylist


# 리스트 결합 (벡터결합과 같다)

w1<-list("a","b","c")
w2<-list("d","e","f")
w3<-c(w1,w2)
w3


# r의 수치연산 관련 함수 대부분으느 벡터 자료구조를 사용
mydata<-list(1.5,2.0,3.5,4.5)
# 만약 리스트로 저장된 데이터를 연산하려면, 벡터로 변환
# unlist함수 : 리스트 -> 벡터

class(mydata)
class(unlist(mydata))
mean(unlist(mydata))
max(unlist(mydata))


# 데이터 프레임
# 행과 열로 구성, 2차원 구조 (행렬과 같음)
# 행렬은 모든 데이터 타입이 일치
# 데이터프레임은 서로 다른 데이터 타입을 가질 수 있음.(리스트와 같음)
# 데이터 프레임은(2차원 구조), 리스트는(1차원구조)

# 데이터 프레임은
# 동일한 길이의 벡터로 이루어진 리스트를 
# 구성요소로 하는 데이터 구조


# data.frame() 함수를 이용하여 벡터로 부터 데이터 프레임을 생성
v1<-c("a1","a2","a3")
v2<-c(10,20,30)
v3<-c("x","y")
data.frame(v1,v2)
# data.frame(v1,v2,v3) 에러가 뜸 row의 수가 다름
v3[3]<-"z"
v3
data.frame(v1,v2,v3)
df<-data.frame(v1,v2,v3)
str(df)
# obs->observations
# 3 variables(features)



#    x1 x2 ... x10000
# 0  0  20  ...  255
#    0  20  ...  255
#    0  20  ...  255
#    ...
# 99 0  20  ...  255
# 
# 
# 100(obs, instance, object)장의 이미지
# 각 이미지 데이터의 차원은?10000차원, feature가 10000개 있음,
# 각각의 이미지가 10000차원 공간의 (0,20,...,255) 위치에 점으로 표시가 됨
# 유클리디안 거리 또는 코사인 유사도 등의 알고리즘 기반 거리 계산을 통해
# 유사한 데이터를 찾아낼 수 있음.



# 행 이름으로 특정 벡터를 지정
data.frame(row.names=v1,v2,v3)
p<-data.frame(id=v1,name=v3,price=v2)
str(p)




v1<-c("a1","a2","a3")
v2<-c(10,20,30)
v3<-c("x","y","z")
df<-data.frame(v1,v2,v3)
data.frame(id=v1, price=v2, name=v3)
p
str(p)

# stringsAsFactors
# 벡터 -> 데이터프레임 생성할 때 데이터 타입을 팩터로 지정
#(데이터를 Factor형태로서 string(문자열)을 읽겠습니까?)

stringsAsFactors=FALSE
# 팩터로 문자열을 읽지 않겠다. 즉 문자열로 읽겠다.

stringsAsFactors=TRUE
# 팩터로 문자열을 읽겠다. 즉 문자열을 팩터로 읽겠다.


data.frame(id=v1, price=v2, name=v3, stringsAsFactors = TRUE)
str(p)



# 문자열 총 10개, stringsAsFactors=False
# 2개 팩터 (chr-> factor변환), 8개 문자벡터

# as.data.frame 함수
# 행렬, 리스트로 부터 데이터 프레임 생성
mat<-matrix(c(1,2,3,4,5,6),ncol=2)
mat
# 행렬->데이터프레임
num<-as.data.frame(mat)
colnames(num)# 열 이름 출력
colnames(num)<-c("d1","d2")
num


# 리스트->데이터프레임
v1<-c("a1","a2","a3")
v2<-c(10,20,30)
v3<-c("x","y","z")
lst<-list(v1,v2,v3)
p<-as.data.frame(lst)
colnames(p)
colnames(p)<-c("id","name","price")
p


# length함수
# 행렬에서 데이터의 길이(원소의 갯수)
# 데이터프레임에서는 column의 갯수
length(p)
ncol(p)
nrow(p)




# datasets패키지 
# r 설치시 기본적으로 내장되어 있는 데이터 셋

state.abb# 미국 50개주의 약자
state.name
state.region
state.area # 평방마일(면적)

str(state.abb)
str(state.name)
str(state.region)
str(state.area)


us.state<-data.frame(state.abb,state.name,state.region,state.area)
us.state

str(us.state)

# state.name 열 추출
us.state$state.name
#[[]] or [] 사용하여 열 추출
#[[]] : 열 하나를 벡터or 팩터로 출력
# [] : 데이터 프레임이 추출, 하나 또는 여러개의 열을 추출할 수 있다.
us.state[[2]]
str(us.state[[2]])

us.state[2]
str(us.state[2])

us.state[c(2,3)]
str(us.state[c(2,3)])

# 행렬 인덱싱 사용 가능
us.state
us.state[,2]
us.state[,2, drop=FALSE]
# 행렬에서는 drop=FALSE 적용시, 출력결과의 타입이 행렬
# 데이터프레임에서는 drop=FALSE 적용시, 출력 결과의 타입이 데이터프레임

us.state[,c(2,4)]

us.state[["state.name"]]
us.state$state.name
us.state[,"state.name"]

us.state[c("state.name", "state.area")] #리스트 인덱싱
us.state[,c("state.name", "state.area")] # 행렬 인덱싱





id<-c("a1","a2","a3")
price<-c(10,20,30)
name<-c("x","y","z")

product<-data.frame(id,name,price)
product
str(product)


#rbind(): 데이터프레임에 행 추가
product<-rbind(product,c("a4","k",40))

# 4번 행 제거
product<-product[-4,]

product


# 여러 행 추가
new.rows<-data.frame(id=c("a5","a6"),
           name=c("a","b"),
           price=c(50,60))
new.rows
product<-rbind(product,new.rows)
product

# as.numeric()
# price가 문자열로 인식됫으니 숫자형으로 변경
product$price<-as.numeric(product$price)
str(product)









